{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyRoughNotation","props","node","_onMouseClick","index","onMouseClick","setState","is_selected","state","is_hovering","this","value","index_is_selected","onMouseEnter","onMouseLeave","rest","_index_is_selected","scrollIntoView","behavior","block","type","onClick","show","ref","React","Component","MyComponent","numClicks","isFocused","get_is_selected","set_is_selected","i","render","name","args","theme","style","console","log","borderStyling","primaryColor","border","outline","values","animate","strokeWidth","iterations","multiline","onClicked","map","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"6WAeMA,EAAe,kDAEnB,WAAYC,GAAY,IAAD,EAIJ,OAJI,qBACrB,cAAMA,IAFRC,UAAI,IAQIC,cAAgB,SAACC,EAAYC,GAEnC,EAAKC,SAAS,CAAEC,aAAa,IAC7BF,EAAaD,IARb,EAAKI,MAAQ,CAAEC,aAAa,EAAOF,aAAa,GAEhD,EAAKL,KAAO,KAAK,EAyClB,OAxCA,mCAOD,WAAU,IAAD,OACDD,EAAYS,KAAKT,MACjBQ,EAAcC,KAAKF,MAAMC,YAGtBL,GAMLH,EAPFU,MAOEV,EANFG,OACmBQ,EAKjBX,EALFW,kBAGcP,GAEZJ,EAJFY,aAIEZ,EAHFa,aAGEb,EAFFI,cACGU,EAAI,YACLd,EAAK,GAEHe,EAAqBJ,KAAqBR,EAWhD,OATIY,GAEEN,KAAKR,MACPQ,KAAKR,KAAKe,eAAe,CAAEC,SAAU,SAAUC,MAAO,WAMlD,8BACN,kBAAC,IAAa,iBAAKJ,EAAI,CAAEK,KAAK,YAC5BP,aAAc,kBAAM,EAAKP,SAAS,CAAEG,aAAa,KACjDK,aAAc,kBAAM,EAAKR,SAAS,CAAEG,aAAa,KACjDY,QAAS,kBAAM,EAAKlB,cAAcC,EAAOC,IACzCiB,KAAMN,GAAsBP,KACd,UAAS,yBAAKc,IAAK,SAAArB,GAAI,OAAK,EAAKA,KAAOA,KAClD,UAET,EA/CkB,CAASsB,IAAMC,WAmD9BC,EAAW,iKAiEd,OAjEc,oCACRlB,MAAQ,CAAEmB,UAAW,EAAGC,WAAW,EAAOnB,aAAc,EAAIF,aAAc,GAAI,EAC7EsB,gBAAkB,WACxB,OAAO,EAAKrB,MAAMD,aACnB,EACOuB,gBAAkB,SAACC,GACrBA,GAAG,GACL,EAAKzB,SAAS,CAAEC,YAAawB,KAGhC,EACMC,OAAS,WAEd,IAAMC,EAAO,EAAKhC,MAAMiC,KAAW,KACnC,EAAKJ,gBAAgB,EAAK7B,MAAMiC,KAAqB,gBAKrD,IAAQC,EAAU,EAAKlC,MAAfkC,MACFC,EAA6B,GAKnC,GAJAC,QAAQC,IAAI,cAIRH,EAAO,CAGT,IAAMI,EAAa,oBACjB,EAAK/B,MAAMoB,UAAYO,EAAMK,aAAe,QAE9CJ,EAAMK,OAASF,EACfH,EAAMM,QAAUH,EAIlB,IAAMI,EAAcV,EACdhC,EAAQ,CACZ2C,SAAS,EACTC,YAAa,EACbC,WAAW,EACXC,WAAU,EACV1C,aAAc,EAAK2C,WAerB,OAAOL,EAAOM,KAXD,SAACtC,EAAeP,GAE3B,IAAMW,EAAI,aACRJ,MAAOA,EACPP,MAAOA,EACPQ,kBAAmB,kBAAM,EAAKiB,oBAC1B5B,GAEN,OACE,kBAAC,EAAoBc,OAG1B,EAEOiC,UAAY,SAACjB,GACnB,EAAKzB,UACH,SAAA4C,GAAS,MAAK,CAAE3C,YAAawB,MAC7B,kBAAMoB,IAAUC,kBAAkB,EAAK5C,MAAMD,iBAEhD,wBAjEc,CAAS8C,KAoEXC,cAAwB5B,GClIvC6B,IAASvB,OACP,kBAAC,IAAMwB,WAAU,KACf,kBAAC,EAAW,OAEdC,SAASC,eAAe,W","file":"static/js/main.da0426b3.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { RoughNotation } from \"react-rough-notation\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  is_hovering: number\n  is_selected: number\n}\n// here we need to modify to add the _ref\nclass MyRoughNotation extends React.Component<{}, { is_hovering: boolean, is_selected: boolean}> {\n  node: any;\n  constructor(props:any) {\n    super(props);\n    this.state = { is_hovering: false, is_selected: false\n    };\n    this.node = null;\n  }\n\n  private _onMouseClick = (index: any, onMouseClick: any) => {\n\n    this.setState({ is_selected: true });\n    onMouseClick(index);\n  }\n  render() {\n    const props:any = this.props;\n    const is_hovering = this.state.is_hovering;\n    const {\n      value: value,\n      index: index,\n      index_is_selected: index_is_selected,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onMouseClick: onMouseClick,\n      ...rest\n    } = props;\n    \n    const _index_is_selected = index_is_selected()==index;\n    \n    if (_index_is_selected){\n      \n      if (this.node) {\n        this.node.scrollIntoView({ behavior: \"smooth\", block: \"center\" });\n      }\n\n    \n      \n    }\n    return (<span>\n      <RoughNotation {...rest} type='underline'\n        onMouseEnter={() => this.setState({ is_hovering: true })}\n        onMouseLeave={() => this.setState({ is_hovering: false })}\n        onClick={() => this._onMouseClick(index, onMouseClick)}\n        show={_index_is_selected || is_hovering} >\n      </RoughNotation> &nbsp;  <div ref={node => (this.node = node)}>\n      </div>  </span>\n    )   \n  }    \n}\n\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, is_hovering: -1 , is_selected: -1 }; \n  private get_is_selected = () => {\n    return this.state.is_selected;\n  }\n  private set_is_selected = (i: any) => {\n    if (i>=0){\n      this.setState({ is_selected: i });\n    }\n    \n  }\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    this.set_is_selected(this.props.args[\"selected_index\"])\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    console.log(\"rerendered\");\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const values: any = name;\n    const props = {\n      animate: false,\n      strokeWidth: 2,\n      iterations:1,\n      multiline:true,\n      onMouseClick: this.onClicked,\n      \n\n    };\n    const func = (value: string, index: any) => \n    {\n      const rest = {\n        value: value,\n        index: index,\n        index_is_selected: () => this.get_is_selected() ,\n         ...props \n      };\n      return (\n        <MyRoughNotation {...rest} />\n    )}\n    return values.map(func);\n  }\n\n  private onClicked = (i: any) => {\n    this.setState(\n      prevState => ({ is_selected: i }),\n      () => Streamlit.setComponentValue(this.state.is_selected)\n    )\n  }\n}\n\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}