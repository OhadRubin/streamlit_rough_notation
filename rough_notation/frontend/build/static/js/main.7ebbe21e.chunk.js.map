{"version":3,"sources":["../node_modules/typescript/lib sync","MyComponent.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","MyRoughNotation","props","_onMouseClick","index","onMouseClick","setState","is_selected","state","is_hovering","ref","React","createRef","this","value","index_is_selected","onMouseEnter","onMouseLeave","rest","_index_is_selected","type","onClick","show","Component","MyComponent","numClicks","isFocused","itemsRef","useRef","Map","get_is_selected","set_is_selected","i","scrollToId","render","name","args","theme","style","console","log","borderStyling","primaryColor","border","outline","values","animate","strokeWidth","iterations","multiline","onClicked","map","key","node","buildRef","prevState","Streamlit","setComponentValue","itemId","getMap","get","scrollIntoView","behavior","block","inline","current","set","delete","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7ebbe21e.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { RoughNotation } from \"react-rough-notation\";\nimport { Map } from \"typescript\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  is_hovering: number\n  is_selected: number\n}\n// here we need to modify to add the _ref\nclass MyRoughNotation extends React.Component<{}, { is_hovering: boolean, is_selected: boolean, ref: React.RefObject<any>}> {\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      is_hovering: false, is_selected: false, ref: React.createRef()\n    };\n  }\n  private _onMouseClick = (index: any, onMouseClick: any) => {\n    \n    this.setState({ is_selected: true });\n    onMouseClick(index);\n  }\n  // componentDidMount() {\n  //   // Check if the `node` property is not null before calling the\n  //   // `scrollIntoView` method.\n  //   if (this.state.is_selected){\n  //     if (this.myRef) {\n  //       this.myRef.scrollIntoView();\n  //     }\n  //   }\n  // }\n  render() {\n    const props:any = this.props;\n    const is_hovering = this.state.is_hovering;\n    const {\n      value: value,\n      index: index,\n      index_is_selected: index_is_selected,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onMouseClick: onMouseClick,\n      ...rest\n    } = props;\n    \n    const _index_is_selected = index_is_selected()==index;\n    // this.setState({ is_selected: _index_is_selected });\n    \n    // if (_index_is_selected){\n    //   console.log(this.myRef);\n    //   // this.myRef.current.focus();  \n    //   this.myRef.current.scrollIntoView({ behavior: \"auto\", block: \"center\", inline: \"center\" });\n    // }\n\n\n    \n\n    \n    return (<span>\n      <RoughNotation {...rest} type='underline' ref={this.state.ref}\n        onMouseEnter={() => this.setState({ is_hovering: true })}\n        onMouseLeave={() => this.setState({ is_hovering: false })}\n        onClick={() => this._onMouseClick(index, onMouseClick)}\n        show={_index_is_selected || is_hovering} >\n      </RoughNotation> &nbsp; \n       </span >\n    )   \n  }    \n}\n\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  // ref_list: React.Ref = [];\n  // public itemsRef =  React.useRef(null) \n  public state = { numClicks: 0, isFocused: false, is_hovering: -1, is_selected: -1, itemsRef: React.useRef(new Map()) \n     \n    }; \n  \n\n  private scrollToId(itemId: any) {\n    const node = this.getMap().get(itemId);\n    node.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n  private getMap(){\n    // this.itemsRef.current.\n    return this.state.itemsRef.current;\n  }\n  private buildRef(node: any, index: any) {\n    let map = this.getMap()\n    if (node) {\n      map.set(index, node);\n    } else {\n      map.delete(index);\n    }\n  }\n  private get_is_selected = () => {\n    return this.state.is_selected;\n  }\n  private set_is_selected = (i: any) => {\n    if (i >= 0) {\n      this.setState({ is_selected: i });\n      this.scrollToId(i);\n    }\n\n  }\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    this.set_is_selected(this.props.args[\"selected_index\"])\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    console.log(\"rerendered\");\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const values: any = name;\n    const props = {\n      animate: false,\n      strokeWidth: 2,\n      iterations:1,\n      multiline:true,\n      onMouseClick: this.onClicked,\n    };\n\n\n\n    const func = (value: string, index: any) => \n    {\n      const rest = {\n        value: value,\n        index: index,\n        index_is_selected: () => this.get_is_selected() ,\n         ...props \n      };\n      return (\n        <MyRoughNotation {...rest} \n          key={index} ref={(node) => this.buildRef(node, index)}\n        />\n    )};\n    \n    return values.map(func);\n  }\n\n  private onClicked = (i: any) => {\n    this.setState(\n      prevState => ({ is_selected: i }),\n      () => {\n        Streamlit.setComponentValue(this.state.is_selected);\n      }\n    )\n  }\n}\n\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}