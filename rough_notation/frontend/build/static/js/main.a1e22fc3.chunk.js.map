{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyRoughNotation","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_onMouseClick","index","onMouseClick","setState","is_selected","state","is_hovering","inherits","createClass","key","value","_this2","index_is_selected","onMouseEnter","onMouseLeave","rest","objectWithoutProperties","_index_is_selected","react_default","a","createElement","module_es","assign","type","onClick","show","React","Component","MyComponent","_StreamlitComponentBa","_getPrototypeOf2","_this3","_len","arguments","length","args","Array","_key","apply","concat","numClicks","isFocused","get_is_selected","render","name","theme","style","console","log","borderStyling","primaryColor","border","outline","values","animate","strokeWidth","iterations","multiline","onClicked","map","objectSpread","MyComponent_MyRoughNotation","i","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","src_MyComponent","document","getElementById"],"mappings":"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","file":"static/js/main.a1e22fc3.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { RoughNotation } from \"react-rough-notation\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  is_hovering: number\n  is_selected: number\n}\n\nclass MyRoughNotation extends React.Component<{}, { is_hovering: boolean, is_selected: boolean}> {\n  constructor(props:any) {\n    super(props);\n    this.state = { is_hovering: false, is_selected : false };\n  }\n  private _onMouseClick = (index: any, onMouseClick: any) => {\n\n    this.setState({ is_selected: true });\n    onMouseClick(index);\n  }\n  render() {\n    const props:any = this.props;\n    const is_hovering = this.state.is_hovering;\n    const {\n      value: value,\n      index: index,\n      index_is_selected: index_is_selected,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onMouseClick: onMouseClick,\n      ...rest\n    } = props;\n    \n    const _index_is_selected = index_is_selected()==index;\n    return (<span>\n      <RoughNotation {...rest} type='underline'\n        onMouseEnter={() => this.setState({ is_hovering: true })}\n        onMouseLeave={() => this.setState({ is_hovering: false })}\n        onClick={() => this._onMouseClick(index, onMouseClick)}\n        show={_index_is_selected || is_hovering} >\n        {value}\n      </RoughNotation> &nbsp; </span>\n    )   \n  }    \n}\n\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, is_hovering: -1 , is_selected: -1 }; \n  private get_is_selected = () => {\n    return this.state.is_selected;\n  }\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    console.log(\"rerendered\");\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const values: any = name;\n    const props = {\n      animate: false,\n      strokeWidth: 2,\n      iterations:1,\n      multiline:true,\n      onMouseClick: this.onClicked,\n      \n\n    };\n    const func = (value: string, index: any) => \n    {\n      const rest = {\n        value: value, index: index, index_is_selected: () => this.get_is_selected() , ...props \n      };\n      return (\n        <MyRoughNotation {...rest} />\n    )}\n    return values.map(func);\n  }\n\n  private onClicked = (i: any) => {\n    this.setState(\n      prevState => ({ is_selected: i }),\n      () => Streamlit.setComponentValue(this.state.is_selected)\n    )\n  }\n}\n\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}