{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyRoughNotation","props","_onMouseClick","index","onMouseClick","setState","is_selected","state","is_hovering","this","value","index_is_selected","onMouseEnter","onMouseLeave","rest","_index_is_selected","type","onClick","show","React","Component","MyComponent","numClicks","isFocused","get_is_selected","set_is_selected","i","render","name","args","theme","style","console","log","borderStyling","primaryColor","border","outline","values","animate","strokeWidth","iterations","multiline","onClicked","map","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"6WAeMA,EAAe,kDACnB,WAAYC,GAAY,IAAD,EAEoC,OAFpC,qBACrB,cAAMA,IAGAC,cAAgB,SAACC,EAAYC,GAEnC,EAAKC,SAAS,CAAEC,aAAa,IAC7BF,EAAaD,IALb,EAAKI,MAAQ,CAAEC,aAAa,EAAOF,aAAc,GAAQ,EA8B1D,OA7BA,mCAMD,WAAU,IAAD,OACDL,EAAYQ,KAAKR,MACjBO,EAAcC,KAAKF,MAAMC,YAEtBE,EAOLT,EAPFS,MACOP,EAMLF,EANFE,MACmBQ,EAKjBV,EALFU,kBAGcP,GAEZH,EAJFW,aAIEX,EAHFY,aAGEZ,EAFFG,cACGU,EAAI,YACLb,EAAK,GAEHc,EAAqBJ,KAAqBR,EAChD,OAAQ,8BACN,kBAAC,IAAa,iBAAKW,EAAI,CAAEE,KAAK,YAC5BJ,aAAc,kBAAM,EAAKP,SAAS,CAAEG,aAAa,KACjDK,aAAc,kBAAM,EAAKR,SAAS,CAAEG,aAAa,KACjDS,QAAS,kBAAM,EAAKf,cAAcC,EAAOC,IACzCc,KAAMH,GAAsBP,IAC3BE,GACa,cAEnB,EAjCkB,CAASS,IAAMC,WAqC9BC,EAAW,iKAiEd,OAjEc,oCACRd,MAAQ,CAAEe,UAAW,EAAGC,WAAW,EAAOf,aAAc,EAAIF,aAAc,GAAI,EAC7EkB,gBAAkB,WACxB,OAAO,EAAKjB,MAAMD,aACnB,EACOmB,gBAAkB,SAACC,GACrBA,GAAG,GACL,EAAKrB,SAAS,CAAEC,YAAaoB,KAGhC,EACMC,OAAS,WAEd,IAAMC,EAAO,EAAK3B,MAAM4B,KAAW,KACnC,EAAKJ,gBAAgB,EAAKxB,MAAM4B,KAAqB,gBAKrD,IAAQC,EAAU,EAAK7B,MAAf6B,MACFC,EAA6B,GAKnC,GAJAC,QAAQC,IAAI,cAIRH,EAAO,CAGT,IAAMI,EAAa,oBACjB,EAAK3B,MAAMgB,UAAYO,EAAMK,aAAe,QAE9CJ,EAAMK,OAASF,EACfH,EAAMM,QAAUH,EAIlB,IAAMI,EAAcV,EACd3B,EAAQ,CACZsC,SAAS,EACTC,YAAa,EACbC,WAAW,EACXC,WAAU,EACVtC,aAAc,EAAKuC,WAerB,OAAOL,EAAOM,KAXD,SAAClC,EAAeP,GAE3B,IAAMW,EAAI,aACRJ,MAAOA,EACPP,MAAOA,EACPQ,kBAAmB,kBAAM,EAAKa,oBAC1BvB,GAEN,OACE,kBAAC,EAAoBa,OAG1B,EAEO6B,UAAY,SAACjB,GACnB,EAAKrB,UACH,SAAAwC,GAAS,MAAK,CAAEvC,YAAaoB,MAC7B,kBAAMoB,IAAUC,kBAAkB,EAAKxC,MAAMD,iBAEhD,wBAjEc,CAAS0C,KAoEXC,cAAwB5B,GCpHvC6B,IAASvB,OACP,kBAAC,IAAMwB,WAAU,KACf,kBAAC,EAAW,OAEdC,SAASC,eAAe,W","file":"static/js/main.6a761fbf.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { RoughNotation } from \"react-rough-notation\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  is_hovering: number\n  is_selected: number\n}\n\nclass MyRoughNotation extends React.Component<{}, { is_hovering: boolean, is_selected: boolean}> {\n  constructor(props:any) {\n    super(props);\n    this.state = { is_hovering: false, is_selected : false };\n  }\n  private _onMouseClick = (index: any, onMouseClick: any) => {\n\n    this.setState({ is_selected: true });\n    onMouseClick(index);\n  }\n  render() {\n    const props:any = this.props;\n    const is_hovering = this.state.is_hovering;\n    const {\n      value: value,\n      index: index,\n      index_is_selected: index_is_selected,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onMouseClick: onMouseClick,\n      ...rest\n    } = props;\n    \n    const _index_is_selected = index_is_selected()==index;\n    return (<span>\n      <RoughNotation {...rest} type='underline'\n        onMouseEnter={() => this.setState({ is_hovering: true })}\n        onMouseLeave={() => this.setState({ is_hovering: false })}\n        onClick={() => this._onMouseClick(index, onMouseClick)}\n        show={_index_is_selected || is_hovering} >\n        {value}\n      </RoughNotation> &nbsp; </span>\n    )   \n  }    \n}\n\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  public state = { numClicks: 0, isFocused: false, is_hovering: -1 , is_selected: -1 }; \n  private get_is_selected = () => {\n    return this.state.is_selected;\n  }\n  private set_is_selected = (i: any) => {\n    if (i>=0){\n      this.setState({ is_selected: i });\n    }\n    \n  }\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    this.set_is_selected(this.props.args[\"selected_index\"])\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    console.log(\"rerendered\");\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const values: any = name;\n    const props = {\n      animate: false,\n      strokeWidth: 2,\n      iterations:1,\n      multiline:true,\n      onMouseClick: this.onClicked,\n      \n\n    };\n    const func = (value: string, index: any) => \n    {\n      const rest = {\n        value: value,\n        index: index,\n        index_is_selected: () => this.get_is_selected() ,\n         ...props \n      };\n      return (\n        <MyRoughNotation {...rest} />\n    )}\n    return values.map(func);\n  }\n\n  private onClicked = (i: any) => {\n    this.setState(\n      prevState => ({ is_selected: i }),\n      () => Streamlit.setComponentValue(this.state.is_selected)\n    )\n  }\n}\n\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}