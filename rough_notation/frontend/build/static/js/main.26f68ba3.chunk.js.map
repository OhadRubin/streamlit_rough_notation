{"version":3,"sources":["../node_modules/typescript/lib sync","MyComponent.tsx","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","MyRoughNotation","props","_onMouseClick","index","onMouseClick","setState","is_selected","state","is_hovering","this","value","index_is_selected","onMouseEnter","onMouseLeave","rest","_index_is_selected","type","onClick","show","React","Component","MyComponent","numClicks","isFocused","itemsRef","useRef","Map","get_is_selected","set_is_selected","i","scrollToId","render","name","args","theme","style","console","log","borderStyling","primaryColor","border","outline","values","animate","strokeWidth","iterations","multiline","onClicked","map","key","ref","node","buildRef","prevState","Streamlit","setComponentValue","itemId","getMap","get","scrollIntoView","behavior","block","inline","current","set","delete","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26f68ba3.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 21;","import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { RoughNotation } from \"react-rough-notation\";\nimport { Map } from \"typescript\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  is_hovering: number\n  is_selected: number\n}\n// here we need to modify to add the _ref\nclass MyRoughNotation extends React.Component<{}, { is_hovering: boolean, is_selected: boolean}> {\n  constructor(props:any) {\n    super(props);\n    this.state = {\n      is_hovering: false, is_selected: false\n    };\n  }\n  private _onMouseClick = (index: any, onMouseClick: any) => {\n    \n    this.setState({ is_selected: true });\n    onMouseClick(index);\n  }\n  // componentDidMount() {\n  //   // Check if the `node` property is not null before calling the\n  //   // `scrollIntoView` method.\n  //   if (this.state.is_selected){\n  //     if (this.myRef) {\n  //       this.myRef.scrollIntoView();\n  //     }\n  //   }\n  // }\n  render() {\n    const props:any = this.props;\n    const is_hovering = this.state.is_hovering;\n    const {\n      value: value,\n      index: index,\n      index_is_selected: index_is_selected,\n      onMouseEnter: onMouseEnter,\n      onMouseLeave: onMouseLeave,\n      onMouseClick: onMouseClick,\n      ...rest\n    } = props;\n    \n    const _index_is_selected = index_is_selected()==index;\n    // this.setState({ is_selected: _index_is_selected });\n    \n    // if (_index_is_selected){\n    //   console.log(this.myRef);\n    //   // this.myRef.current.focus();  \n    //   this.myRef.current.scrollIntoView({ behavior: \"auto\", block: \"center\", inline: \"center\" });\n    // }\n\n\n    \n\n    \n    return (<span>\n      <RoughNotation {...rest} type='underline'\n        onMouseEnter={() => this.setState({ is_hovering: true })}\n        onMouseLeave={() => this.setState({ is_hovering: false })}\n        onClick={() => this._onMouseClick(index, onMouseClick)}\n        show={_index_is_selected || is_hovering} >\n        {value}\n\n      </RoughNotation> &nbsp; \n       </span >\n    )   \n  }    \n}\n\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  // ref_list: React.Ref = [];\n  // public itemsRef =  React.useRef(null) \n  public state = { numClicks: 0, isFocused: false, is_hovering: -1, is_selected: -1, \n    itemsRef: React.useRef(new Map()) \n     \n    }; \n  \n\n  public scrollToId(itemId: any) {\n    const node = this.getMap().get(itemId);\n    node.scrollIntoView({\n      behavior: 'smooth',\n      block: 'nearest',\n      inline: 'center'\n    });\n  }\n  public getMap(){\n    // this.itemsRef.current.\n    return this.state.itemsRef.current;\n  }\n  public buildRef(node: any, index: any) {\n    let map = this.getMap()\n    if (node) {\n      map.set(index, node);\n    } else {\n      map.delete(index);\n    }\n  }\n\n  private get_is_selected = () => {\n    return this.state.is_selected;\n  }\n  private set_is_selected = (i: any) => {\n    if (i >= 0) {\n      this.setState({ is_selected: i });\n      this.scrollToId(i);\n    }\n\n  }\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    this.set_is_selected(this.props.args[\"selected_index\"])\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    console.log(\"rerendered\");\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const values: any = name;\n    const props = {\n      animate: false,\n      strokeWidth: 2,\n      iterations:1,\n      multiline:true,\n      onMouseClick: this.onClicked,\n    };\n\n\n\n    const func = (value: string, index: any) => \n    {\n      const rest = {\n        value: value,\n        index: index,\n        index_is_selected: () => this.get_is_selected() ,\n         ...props \n      };\n      return (\n        <MyRoughNotation {...rest} \n          key={index} \n          ref={(node) => this.buildRef(node, index)}\n        />\n    )};\n    \n    return values.map(func);\n  }\n\n  private onClicked = (i: any) => {\n    this.setState(\n      prevState => ({ is_selected: i }),\n      () => {\n        Streamlit.setComponentValue(this.state.is_selected);\n      }\n    )\n  }\n}\n\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}