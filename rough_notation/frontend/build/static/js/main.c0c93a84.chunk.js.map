{"version":3,"sources":["MyComponent.tsx","index.tsx"],"names":["MyRoughNotation","props","React","useState","is_hovering_bool","setIsHovering","value","index","index_is_selected","onMouseClick","onMouseEnter","onMouseLeave","rest","_index_is_selected","type","onClick","_onMouseClick","show","MyComponent","state","numClicks","isFocused","is_hovering","is_selected","get_is_selected","set_is_selected","i","setState","render","name","args","theme","style","console","log","borderStyling","primaryColor","border","outline","values","animate","strokeWidth","iterations","multiline","onClicked","map","prevState","Streamlit","setComponentValue","StreamlitComponentBase","withStreamlitConnection","ReactDOM","StrictMode","document","getElementById"],"mappings":"oXAgBA,SAASA,EAAgBC,GACvB,MAA0CC,IAAMC,UAAS,GAAM,mBAAxDC,EAAgB,KAAEC,EAAa,KAItC,IACSC,EAOLL,EAPFK,MACOC,EAMLN,EANFM,MACmBC,EAKjBP,EALFO,kBAGcC,GAEZR,EAJFS,aAIET,EAHFU,aAGEV,EAFFQ,cACGG,EAAI,YACLX,EAAK,GAEDY,EAAqBL,KAAqBD,EAChD,OAAQ,8BACN,kBAAC,IAAa,iBAAKK,EAAI,CAAEE,KAAK,YAC5BJ,aAAc,kBAAML,GAAc,IAClCM,aAAc,kBAAMN,GAAc,IAClCU,QAAS,kBAlBb,SAAuBR,EAAYE,GACjCA,EAAaF,GAiBIS,CAAcT,EAAOE,IACpCQ,KAAMJ,GAAsBT,IAC3BE,GAEa,SAGnB,IAIGY,EAAW,iKAqGd,OArGc,oCAGRC,MAAQ,CAAEC,UAAW,EAAGC,WAAW,EAAOC,aAAc,EAAGC,aAAc,GAG5E,EAwBIC,gBAAkB,WACxB,OAAO,EAAKL,MAAMI,aACnB,EACOE,gBAAkB,SAACC,GACrBA,GAAK,GACP,EAAKC,SAAS,CAAEJ,YAAaG,KAIhC,EACME,OAAS,WAEd,IAAMC,EAAO,EAAK5B,MAAM6B,KAAW,KACnC,EAAKL,gBAAgB,EAAKxB,MAAM6B,KAAqB,gBAKrD,IAAQC,EAAU,EAAK9B,MAAf8B,MACFC,EAA6B,GAKnC,GAJAC,QAAQC,IAAI,cAIRH,EAAO,CAGT,IAAMI,EAAa,oBACjB,EAAKhB,MAAME,UAAYU,EAAMK,aAAe,QAE9CJ,EAAMK,OAASF,EACfH,EAAMM,QAAUH,EAIlB,IAAMI,EAAcV,EACd5B,EAAQ,CACZuC,SAAS,EACTC,YAAa,EACbC,WAAW,EACXC,WAAU,EACVlC,aAAc,EAAKmC,WAoBrB,OAAOL,EAAOM,KAfD,SAACvC,EAAeC,GAE3B,IAAMK,EAAI,aACRN,MAAOA,EACPC,MAAOA,EACPC,kBAAmB,kBAAM,EAAKgB,oBAC1BvB,GAEN,OACE,kBAACD,EAAoBY,OAO1B,EAEOgC,UAAY,SAAClB,GACnB,EAAKC,UACH,SAAAmB,GAAS,MAAK,CAAEvB,YAAaG,MAC7B,WACEqB,IAAUC,kBAAkB,EAAK7B,MAAMI,iBAG5C,wBArGc,CAAS0B,KAwGXC,cAAwBhC,GCnJvCiC,IAASvB,OACP,kBAAC,IAAMwB,WAAU,KACf,kBAAC,EAAW,OAEdC,SAASC,eAAe,W","file":"static/js/main.c0c93a84.chunk.js","sourcesContent":["import {\n  Streamlit,\n  StreamlitComponentBase,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { ReactNode } from \"react\"\nimport { RoughNotation } from \"react-rough-notation\";\nimport { Map } from \"typescript\";\n\ninterface State {\n  numClicks: number\n  isFocused: boolean\n  is_hovering: number\n  is_selected: number\n}\n// here we need to modify to add the _ref\nfunction MyRoughNotation(props: any){\n  const [is_hovering_bool, setIsHovering] = React.useState(false);\n    function _onMouseClick(index: any, onMouseClick: any){\n      onMouseClick(index);\n    }\n  const {\n    value: value,\n    index: index,\n    index_is_selected: index_is_selected,\n    onMouseEnter: onMouseEnter,\n    onMouseLeave: onMouseLeave,\n    onMouseClick: onMouseClick,\n    ...rest\n  } = props;\n    \n    const _index_is_selected = index_is_selected()==index;\n    return (<span>\n      <RoughNotation {...rest} type='underline'\n        onMouseEnter={() => setIsHovering(true)}\n        onMouseLeave={() => setIsHovering(false)}\n        onClick={() => _onMouseClick(index, onMouseClick)}\n        show={_index_is_selected || is_hovering_bool} >\n        {value}\n\n      </RoughNotation> &nbsp; \n       </span >\n    )   \n  }    \n\n\n\nclass MyComponent extends StreamlitComponentBase<State> {\n  // ref_list: React.Ref = [];\n  // public itemsRef =  React.useRef(null) \n  public state = { numClicks: 0, isFocused: false, is_hovering: -1, is_selected: -1, \n    // itemsRef: React.useRef(new Map()) \n     \n    }; \n  \n\n  // public scrollToId(itemId: any) {\n  //   const node = this.getMap().get(itemId);\n  //   node.scrollIntoView({\n  //     behavior: 'smooth',\n  //     block: 'nearest',\n  //     inline: 'center'\n  //   });\n  // }\n  // public getMap(){\n  //   // this.itemsRef.current.\n  //   return this.state.itemsRef.current;\n  // }\n  // public buildRef(node: any, index: any) {\n  //   let map = this.getMap()\n  //   if (node) {\n  //     map.set(index, node);\n  //   } else {\n  //     map.delete(index);\n  //   }\n  // }\n\n  private get_is_selected = () => {\n    return this.state.is_selected;\n  }\n  private set_is_selected = (i: any) => {\n    if (i >= 0) {\n      this.setState({ is_selected: i });\n      // this.scrollToId(i);\n    }\n\n  }\n  public render = (): ReactNode => {\n\n    const name = this.props.args[\"name\"]\n    this.set_is_selected(this.props.args[\"selected_index\"])\n\n    // Streamlit sends us a theme object via props that we can use to ensure\n    // that our component has visuals that match the active theme in a\n    // streamlit app.\n    const { theme } = this.props\n    const style: React.CSSProperties = {}\n    console.log(\"rerendered\");\n\n    // Maintain compatibility with older versions of Streamlit that don't send\n    // a theme object.\n    if (theme) {\n      // Use the theme object to style our button border. Alternatively, the\n      // theme style is defined in CSS vars.\n      const borderStyling = `1px solid ${\n        this.state.isFocused ? theme.primaryColor : \"gray\"\n      }`\n      style.border = borderStyling\n      style.outline = borderStyling\n    }\n    \n    \n    const values: any = name;\n    const props = {\n      animate: false,\n      strokeWidth: 2,\n      iterations:1,\n      multiline:true,\n      onMouseClick: this.onClicked,\n    };\n\n\n\n    const func = (value: string, index: any) => \n    {\n      const rest = {\n        value: value,\n        index: index,\n        index_is_selected: () => this.get_is_selected() ,\n         ...props \n      };\n      return (\n        <MyRoughNotation {...rest} \n          // key={index} \n          // ref={(node) => this.buildRef(node, index)}\n        />\n    )};\n    \n    return values.map(func);\n  }\n\n  private onClicked = (i: any) => {\n    this.setState(\n      prevState => ({ is_selected: i }),\n      () => {\n        Streamlit.setComponentValue(this.state.is_selected);\n      }\n    )\n  }\n}\n\nexport default withStreamlitConnection(MyComponent)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport MyComponent from \"./MyComponent\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <MyComponent />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n"],"sourceRoot":""}